import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    dependencies {
        classpath 'com.pascalwelsch.gitversioner:gitversioner:0.4.1'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

sourceCompatibility = 1.11

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    api 'com.apptastic:rssreader:2.2.1' //https://github.com/w3stling/rssreader
    api 'org.jsoup:jsoup:1.12.1'
    api 'com.google.code.gson:gson:2.8.6'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    api group: 'commons-codec', name: 'commons-codec', version: '1.14'

    /*Logging and console*/
    api group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    /*--Logging and console--*/

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

// https://github.com/passsy/gradle-gitVersioner-plugin
apply plugin: 'com.pascalwelsch.gitversioner'
gitVersioner {

    def base = System.getProperty("base_branch") != null ? System.getProperty("base_branch") : System.getenv("BASE_BRANCH")
    def snap = System.getProperty("snapshot") != null ? System.getProperty("snapshot") : System.getenv("SNAP")

    baseBranch base == null ? 'development' : base
    def snapshot = snap == null ? true : snap != 'false'
    addSnapshot snapshot

    addLocalChangesDetails false
    if (snapshot) {
        formatter = { gitVersioner ->
            return "${gitVersioner.currentSha1Short}-SNAPSHOT"
        }
    }
}

group 'dev.markusk'
version gitVersioner.versionName

processResources {
    filter(ReplaceTokens, tokens: [VERSION: version])
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [VERSION: version, DATE: getBuildDate(), TIME: getBuildTime()])
}

static def getBuildDate() {
    return new Date().format('yyyy/MM/dd')
}

static def getBuildTime() {
    return new Date().format('HH:mm:ss')
}

compileJava {
    options.encoding = 'UTF-8'
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath
    dependsOn sourcesForRelease
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from "${buildDir}/filteredSrc"
}

jar {
    archivesBaseName = project.name
}

shadowJar {
    archiveClassifier.set('withDependencies')
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    shadowJar.mustRunAfter sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact shadowJar
            artifact sourcesJar
            from components.java
        }
    }
    repositories {
        maven {
            name 'deploy'
            def releasesRepoUrl = "https://nexus.markusk.dev/repository/maven-releases/"
            def snapshotsRepoUrl = "https://nexus.markusk.dev/repository/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('repoUser') ? project.property('repoUser') : System.getenv('REPO_USER')
                password = project.hasProperty('repoPassword') ? project.property('repoPassword') : System.getenv('REPO_PASSWORD')
            }
        }
    }
}